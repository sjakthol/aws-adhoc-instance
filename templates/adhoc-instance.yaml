AWSTemplateFormatVersion: 2010-09-09
Description: An instance for adhoc work

Parameters:
  InstanceName:
    Description: An unique name for the adhoc instance
    Type: String
    MinLength: 1
    MaxLength: 32

  InstanceType:
    Description: The instance type to launch
    Type: String
    Default: m5.large

  SSHKeyName:
    Description: Name of an existing EC2 SSH key to give the instance
    Type: AWS::EC2::KeyPair::KeyName
    Default: sjakthol

  SSHInboundCidr:
    Description: The CIDR from which SSH access should be allowed from
    Type: String
    Default: '0.0.0.0/0'
    AllowedPattern : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription : 'must be a valid CIDR range of the form x.x.x.x/x.'

  AttachVolume:
    Description: A flag indicating if the data volume should be attached or not
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"

  InstanceMarket:
    Description: Instance market to use (spot or ondemand)
    Type: String
    AllowedValues:
      - spot
      - ondemand
    Default: spot

  AMIName:
    Description: Name of the AMI to use
    Type: String
    AllowedValues:
      - Ubuntu1804
      - UbuntuDL
    Default: Ubuntu1804

Conditions:
  WantDataVolume: !Equals [!Ref AttachVolume, "true"]
  WantSpotInstance: !Equals [!Ref InstanceMarket, "spot"]

Mappings:
  Ami:
    eu-west-1:
      Ubuntu1804: ami-08b1cea5487c762b3
      UbuntuDL: ami-0ab24eef0e14017ef

Resources:
  SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub Security group for ${AWS::StackName}
      GroupName: !Sub ${AWS::StackName}-sg
      VpcId: !ImportValue infra-vpc-VpcId
      SecurityGroupIngress:
        - { IpProtocol: tcp, FromPort: 22, ToPort: 22, CidrIp: !Ref SSHInboundCidr, Description: "SSH Access" }
      Tags:
        - { Key: Name, Value: !Sub '${AWS::StackName}-sg' }

  Role:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      RoleName: !Sub ${AWS::StackName}-role
      Policies:
      - PolicyName: Ec2InstanceRole
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Sid: PlaceholderPolicy
            Effect: Allow
            Action:
              - ec2:DescribeInsances
            Resource: '*'

  RoleProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref Role
      InstanceProfileName: !Sub '${AWS::StackName}-profile'

  LaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-template
      LaunchTemplateData:
        EbsOptimized: true
        IamInstanceProfile:
          Arn: !GetAtt RoleProfile.Arn
        ImageId: !FindInMap [Ami, !Ref 'AWS::Region', !Ref AMIName]
        InstanceMarketOptions:
          Fn::If:
            - WantSpotInstance
            - MarketType: spot
              SpotOptions:
                SpotInstanceType: one-time
            - !Ref AWS::NoValue
        InstanceType: !Ref InstanceType
        KeyName: !Ref SSHKeyName
        SecurityGroupIds:
          - !Ref SecurityGroup
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - { Key: Name, Value: !Sub '${AWS::StackName}' }
          - ResourceType: volume
            Tags:
              - { Key: Name, Value: !Sub '${AWS::StackName}-volume' }
        UserData:
          Fn::Base64: !Sub |
            #cloud-config
            repo_update: true
            repo_upgrade: all
            fs_setup:
              - device: /dev/nvme1n1
                filesystem: ext4
                label: home
              - device: /dev/xvdh
                filesystem: ext4
                label: home
            mounts:
              - [/dev/nvme1n1, /data, auto, "defaults,nofail,discard", "0", "0"]
              - [/dev/xvdh, /data, auto, "defaults,nofail,discard", "0", "0"]

  Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      SubnetId: !ImportValue infra-vpc-sn-public-a

  VolumeAttachment:
    Type: AWS::EC2::VolumeAttachment
    Condition: WantDataVolume
    Properties:
      Device: /dev/xvdh
      InstanceId: !Ref Instance
      VolumeId:
        Fn::ImportValue: !Sub adhoc-instance-${InstanceName}-volume
